O(X) v -O(X):-act(X).
F(X) v -F(X):-act(X).
:- O(X),-Poss(X).
-Poss(X):- -Do(X), act(X).
:-O(X), F(X).
Do(X)v-Do(X):- act(X).
:-F(X), Do(X).
Happens(X):-Do(X).
:-Do(X),-Poss(X).
:~ O(X). [1:1]
:~ F(X). [1:1]
%Common Core.
:~ tooclose(X,1), -F("stop"). [1:2]
%Through this predicate Java passes the direction in which the scared blue ghost is too close to pacman, such that stopping could lead to pacman eating the ghost.
:~ toooclose("west",1), -F("west"). [1:3]
:~ toooclose("north",1), -F("north"). [1:3]
:~ toooclose("south",1), -F("south"). [1:3]
:~ toooclose("east",1), -F("east"). [1:3]
%Through this predicate Java passes the direction in which the scared blue ghost is too close to pacman, such that moving in that direction could lead to pacman eating the ghost.
:~ cornerclose("north","west",1), -F("west"). [1:3]
:~ cornerclose("north","west",1), -F("north"). [1:3]
:~ cornerclose("north","east",1), -F("east"). [1:3]
:~ cornerclose("north","east",1), -F("north"). [1:3]
:~ cornerclose("south","west",1), -F("west"). [1:3]
:~ cornerclose("south","west",1), -F("south"). [1:3]
:~ cornerclose("south","east",1), -F("south"). [1:3]
:~ cornerclose("south","east",1), -F("east"). [1:3]
% When Pacman is too close in two direction such that the ghost and Pacman moving in different directions could lead to Pacman eating the ghost.
dont(X):-F(X).
% Added because of a peculiarity in JDLV.
:-F("west"),F("north"),F("south"),F("east"),F("stop").
act("east").
act("north").
act("south").
act("west").
act("stop").
%Note that ghost 1 is the blue ghost.